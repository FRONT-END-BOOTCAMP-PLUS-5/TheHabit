import prisma from '@/public/utils/prismaClient';
import { IPushSubscriptionRepository } from '@/backend/notifications/domain/repositories/IPushSubscriptionRepository';
import { PushSubscription } from '@/backend/notifications/domain/entities/PushSubscription';

export class PrPushSubscriptionRepository implements IPushSubscriptionRepository {
  async create(
    subscription: Omit<PushSubscription, 'id' | 'createdAt'>
  ): Promise<PushSubscription> {
    const createdSubscription = await prisma.pushSubscription.create({
      data: {
        endpoint: subscription.endpoint,
        p256dh: subscription.p256dh,
        auth: subscription.auth,
        userId: subscription.userId,
      },
    });

    return new PushSubscription(
      createdSubscription.id,
      createdSubscription.endpoint,
      createdSubscription.p256dh,
      createdSubscription.auth,
      createdSubscription.userId,
      createdSubscription.createdAt
    );
  }

  async findByEndpoint(endpoint: string): Promise<PushSubscription | null> {
    const subscription = await prisma.pushSubscription.findUnique({
      where: { endpoint },
    });

    if (!subscription) return null;

    return new PushSubscription(
      subscription.id,
      subscription.endpoint,
      subscription.p256dh,
      subscription.auth,
      subscription.userId,
      subscription.createdAt
    );
  }

  async findByUserId(userId: string | null): Promise<PushSubscription[]> {
    const subscriptions = await prisma.pushSubscription.findMany({
      where: { userId },
    });

    return subscriptions.map(
      subscription =>
        new PushSubscription(
          subscription.id,
          subscription.endpoint,
          subscription.p256dh,
          subscription.auth,
          subscription.userId,
          subscription.createdAt
        )
    );
  }

  async deleteByEndpoint(endpoint: string): Promise<boolean> {
    try {
      await prisma.pushSubscription.delete({
        where: { endpoint },
      });
      return true;
    } catch (error) {
      return false;
    }
  }

  async deleteByUserIdAndEndpoint(userId: string | null, endpoint: string): Promise<boolean> {
    try {
      console.log('üóëÔ∏è Íµ¨ÎèÖ Ìï¥Ï†ú ÏãúÎèÑ:', { userId, endpoint: endpoint.substring(0, 50) + '...' });

      // Î®ºÏ†Ä Ìï¥Îãπ Íµ¨ÎèÖÏù¥ Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
      const existingSubscription = await prisma.pushSubscription.findFirst({
        where: {
          userId,
          endpoint,
        },
      });

      console.log('üîç Í∏∞Ï°¥ Íµ¨ÎèÖ Ï∞æÍ∏∞ Í≤∞Í≥º:', existingSubscription ? 'Ï°¥Ïû¨Ìï®' : 'ÏóÜÏùå');

      const result = await prisma.pushSubscription.deleteMany({
        where: {
          userId,
          endpoint,
        },
      });

      console.log('üóëÔ∏è ÏÇ≠Ï†ú Í≤∞Í≥º:', { count: result.count });
      return result.count > 0;
    } catch (error) {
      console.error('üö® Íµ¨ÎèÖ Ìï¥Ï†ú Ï§ë Ïò§Î•ò:', error);
      return false;
    }
  }
}
